{\rtf1\ansi\ansicpg1252\cocoartf1561\cocoasubrtf600
{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;\red0\green0\blue0;\red0\green0\blue0;\red81\green100\blue100;
\red205\green214\blue230;}
{\*\expandedcolortbl;;\cssrgb\c0\c0\c0;\csgray\c0\c0;\cssrgb\c38824\c46667\c46667;
\cssrgb\c83922\c87059\c92157;}
\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\deftab720
\pard\pardeftab720\sl420\partightenfactor0

\f0\fs28 \cf2 \cb3 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec4 // Region structure\strokec5 \
\strokec4 // 1. status: clean, infected, dead\strokec5 \
\strokec4 // 2. afflictions - object with affliction bools - changes randomly as world event\strokec5 \
\strokec4 // 3. services and infrastructure - bools - chages based on core props\strokec5 \
\strokec4 // 4. government affairs - bool - changes more randomly if % of infected\strokec5 \
\strokec4 // 5. population - changes each tick\strokec5 \
\strokec4 //     0. healthy\strokec5 \
\strokec4 //     1. infected\strokec5 \
\strokec4 //     2. dead\strokec5 \
\strokec4 //     3. alive\strokec5 \
\
\strokec4 // When something is purchased\strokec5 \
\strokec4 // 1. reduce currency\strokec5 \
\strokec4 // 2. change modifier to true\strokec5 \
\strokec4 // 3. call the core props calc function | determines the value change from each modifier\strokec5 \
\strokec4 //      (oh boy...)\strokec5 \
\strokec4 // 4. call the world update function | \strokec5 \
\
\strokec4 // Every tick\strokec5 \
\strokec4 // 1. scan each region\strokec5 \
\strokec4 // 1.1.connectedRegions\strokec5 \
\strokec4 //     - if transmission method is active && infection rate is sufficiant, chance to change\strokec5 \
\strokec4 //         - code: app.country.connectedRegions.forEach(region) -> chance to change app[region].status\strokec5 \
\strokec4 // 1.2. calculate the number of people infected\strokec5 \
\strokec4 //     - percentage of total uninfected people\strokec5 \
\strokec4 //     - subtract that number from uninfected people\strokec5 \
\strokec4 //     - move uninfected region to infected region list\strokec5 \
\strokec4 //     - give x evoPts for per y % of people infected in a region\strokec5 \
\strokec4 // 1.3. calculate the number of people killed\strokec5 \
\strokec4 //     - function of lethality and % infected ppl in region - only activates if lethaity is over a certain level\strokec5 \
\strokec4 //     - move infected region to forsaken region list if prudent\strokec5 \
\strokec4 //     - give x evoPts for per y % of people killed in a region\strokec5 \
\strokec4 // 2. calculate vaccine status\strokec5 \
\strokec4 //     - arguably most complicated part\strokec5 \
\strokec4 //     ~~ for hospitals ~~\strokec5 \
\strokec4 //     - scan each infected country to calculate the number of total and active hospitals\strokec5 \
\strokec4 //         - a hospital is false if x % of people are infected && y % percent of people are dead\strokec5 \
\strokec4 //     - vaccine completion && deployment\strokec5 \
\strokec4 //         - does not start until visibility is over a certain level\strokec5 \
\strokec4 //         - number of active hospitals, visibility && lethality increases completion rate\strokec5 \
\strokec4 //         - when completion rate reaches 100, start deployment\strokec5 \
\strokec4 //         - when deployment reaches 100 the user gets 10 days to try to win.\strokec5 \
\
}